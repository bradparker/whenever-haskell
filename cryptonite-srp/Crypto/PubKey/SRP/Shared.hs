{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -Wall #-}

module Crypto.PubKey.SRP.Shared
  ( Params (..),
    Identifier (..),
    Salt (..),
    Verifier (..),
    PublicNumber (..),
    PrivateNumber (..),
    SharedKey (..),
    multiplier,
    hashManyWith,
    generatePrivate,
    calculateMatcher,
    calculateProof,
    params1024,
    params1536,
    params2048,
    params3072,
    params4096,
    params6144,
    params8192,
  )
where

import Crypto.Hash
  ( Digest,
    HashAlgorithm,
    hashFinalize,
    hashInitWith,
    hashUpdates,
  )
import Crypto.Hash.Algorithms (SHA256 (SHA256))
import Crypto.Number.Generate (generateMax)
import Crypto.Number.Serialize (i2ospOf_, os2ip)
import Crypto.Random.Types
import Data.ByteArray (ByteArray, ByteArrayAccess, Bytes, ScrubbedBytes, convert, xor)

-- | Represent Secure Remote Password parameters namely P (prime), and G
-- (generator).
data Params alg
  = Params
      { params_p :: Integer,
        params_g :: Integer,
        params_bits :: Int,
        params_h :: alg
      }
  deriving (Show, Read, Eq)

params1024 :: Params SHA256
params1024 =
  Params
    { params_p = 0xEEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3,
      params_g = 2,
      params_bits = 1024,
      params_h = SHA256
    }

params1536 :: Params SHA256
params1536 =
  Params
    { params_p = 0x9DEF3CAFB939277AB1F12A8617A47BBBDBA51DF499AC4C80BEEEA9614B19CC4D5F4F5F556E27CBDE51C6A94BE4607A291558903BA0D0F84380B655BB9A22E8DCDF028A7CEC67F0D08134B1C8B97989149B609E0BE3BAB63D47548381DBC5B1FC764E3F4B53DD9DA1158BFD3E2B9C8CF56EDF019539349627DB2FD53D24B7C48665772E437D6C7F8CE442734AF7CCB7AE837C264AE3A9BEB87F8A2FE9B8B5292E5A021FFF5E91479E8CE7A28C2442C6F315180F93499A234DCF76E3FED135F9BB,
      params_g = 2,
      params_bits = 1536,
      params_h = SHA256
    }

params2048 :: Params SHA256
params2048 =
  Params
    { params_p = 0xAC6BDB41324A9A9BF166DE5E1389582FAF72B6651987EE07FC3192943DB56050A37329CBB4A099ED8193E0757767A13DD52312AB4B03310DCD7F48A9DA04FD50E8083969EDB767B0CF6095179A163AB3661A05FBD5FAAAE82918A9962F0B93B855F97993EC975EEAA80D740ADBF4FF747359D041D5C33EA71D281E446B14773BCA97B43A23FB801676BD207A436C6481F1D2B9078717461A5B9D32E688F87748544523B524B0D57D5EA77A2775D2ECFA032CFBDBF52FB3786160279004E57AE6AF874E7303CE53299CCC041C7BC308D82A5698F3A8D0C38271AE35F8E9DBFBB694B5C803D89F7AE435DE236D525F54759B65E372FCD68EF20FA7111F9E4AFF73,
      params_g = 2,
      params_bits = 2048,
      params_h = SHA256
    }

params3072 :: Params SHA256
params3072 =
  Params
    { params_p = 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF,
      params_g = 5,
      params_bits = 3072,
      params_h = SHA256
    }

params4096 :: Params SHA256
params4096 =
  Params
    { params_p = 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF,
      params_g = 5,
      params_bits = 4096,
      params_h = SHA256
    }

params6144 :: Params SHA256
params6144 =
  Params
    { params_p = 0x
      params_g = 5,
      params_bits = 6144,
      params_h = SHA256
    }

params8192 :: Params SHA256
params8192 =
  Params
    { params_p = 0x
      params_g = 19,
      params_bits = 8192,
      params_h = SHA256
    }

-- | Represent Secure Remote Password user identifier, called I in SRP text.
newtype Identifier = Identifier Bytes
  deriving (Show, Eq, ByteArrayAccess)

-- | Represent Secure Remote Password verifier, called v in SRP text.
newtype Verifier = Verifier Bytes
  deriving (Show, Eq, ByteArrayAccess)

-- | Represent Secure Remote Password salt, called s in SRP text.
newtype Salt = Salt Bytes
  deriving (Show, Eq, ByteArrayAccess)

-- | Represent Secure Remote Password public number A for the Client and B for
-- the Server in SRP text.
newtype PublicNumber = PublicNumber Integer
  deriving (Show, Read, Eq, Enum, Real, Num, Ord)

-- | Represent Secure Remote Password private number called a for the Client
-- and b for the Server in SRP text.
newtype PrivateNumber = PrivateNumber Integer
  deriving (Show, Read, Eq, Enum, Real, Num, Ord)

-- | Represent Secure Remote Password shared secret, called K in SRP text.
newtype SharedKey = SharedKey ScrubbedBytes
  deriving (Show, Eq, ByteArrayAccess)

-- | Represent Secure Remote Password shared matcher for SharedKey
-- verification, called M in SRP text.
newtype Matcher = Matcher Bytes
  deriving (Show, Eq, ByteArrayAccess)

-- | Represent Secure Remote Password shared proof for Matcher
-- verification, called P in SRP text.
newtype Proof = Proof Bytes
  deriving (Show, Eq, ByteArrayAccess)

hashManyWith :: forall alg ba. (HashAlgorithm alg, ByteArray ba) => alg -> [ba] -> Digest alg
hashManyWith alg = hashFinalize . hashUpdates (hashInitWith alg)

-- | The multiplier parameter hash(prime, generator) usually called k in SRP text.
multiplier :: forall alg. HashAlgorithm alg => Params alg -> Integer
multiplier (Params n g bits alg) =
  let deserialize = i2ospOf_ @Bytes bits
   in os2ip $ hashManyWith alg [deserialize n, deserialize g]

-- | generate a private number with no specific property, this number is usually
-- called a (client) or b (server) in SRP text.
generatePrivate :: forall m alg. MonadRandom m => Params alg -> m PrivateNumber
generatePrivate (Params n _ _ _) = PrivateNumber <$> generateMax n

calculateMatcher ::
  forall alg.
  HashAlgorithm alg =>
  Params alg ->
  Identifier ->
  Salt ->
  PublicNumber ->
  PublicNumber ->
  SharedKey ->
  Matcher
calculateMatcher
  (Params modulus generator bits alg)
  (Identifier identifier)
  (Salt salt)
  (PublicNumber client)
  (PublicNumber server)
  (SharedKey key) =
    let h = hashManyWith alg
        deserialize = i2ospOf_ @ScrubbedBytes bits
     in Matcher $ convert $
          h
            [ convert @(Digest alg) @ScrubbedBytes (h [deserialize modulus])
                `xor` convert @(Digest alg) @ScrubbedBytes (h [deserialize generator]),
              convert (h [convert identifier]),
              convert salt,
              deserialize client,
              deserialize server,
              key
            ]

calculateProof ::
  forall alg.
  HashAlgorithm alg =>
  Params alg ->
  PublicNumber ->
  SharedKey ->
  Matcher ->
  Proof
calculateProof
  (Params _ _ bits alg)
  (PublicNumber client)
  (SharedKey key)
  (Matcher matcher) =
    let h = hashManyWith alg
        deserialize = i2ospOf_ @ScrubbedBytes bits
     in Proof $ convert $
          h
            [ deserialize client,
              convert matcher,
              key
            ]
